#!/usr/bin/env python3

import csv
import json
import plistlib as plist
from collections import OrderedDict
from datetime import datetime, timedelta
from subprocess import PIPE, Popen, run
from sys import argv
from time import localtime, sleep, strftime
from os import nice
from itertools import chain

import requests

def log(msg):
    print(f'[{datetime.now()}] {str(msg)}')

def bg(cmd):
    return Popen(cmd, shell=True, stdout=PIPE)

def json2csv(j: list, w: csv.writer):
    if len(j) == 0:
        return
    w.writerow(j[0].keys())
    for r in j:
        w.writerow(r.values())

def capture(capturename: str):
    log('niceness: ' + str(nice(-20)))
    run('renice -n -20 -p `pgrep "iStatistica Pro"` `pgrep "iStatistica Sensors"`', shell=True)
    log('also reniced istat')
    filename = capturename + '.json'
    samples = []
    starttime = datetime.now()
    try:
        while True:
            pm = bg('powermetrics -i 1000 -n 1 -f plist')
            sleep(0.5)
            log('getting istat')
            istat = requests.get('http://localhost:4027/api/')
            log('got istat, waiting for pm')
            pm = pm.stdout.read()
            timestamp = datetime.now() - starttime
            pm = plist.loads(pm)
            pm['timestamp'] = pm['timestamp'].isoformat()
            samples.append({'timestamp': timestamp / timedelta(seconds=1),
                            'istatistica': json.loads(istat.text),
                            'powermetrics': pm})
            log('done the sample')
    except KeyboardInterrupt:
        pass
    json.dump(samples, open(filename, 'w', encoding='utf-8'))
    return samples

def plot(samples: list, capturename: str):
    j = []
    fmt = '%S' if (l := samples[-1:][0]['timestamp']) < 60 else '%M:%S' if l < 3600 else '%H:%M:%S'
    for sample in samples:
        row = OrderedDict()
        istat = sample['istatistica']
        row['Time'] = strftime(fmt, localtime(sample['timestamp']))
        row['CPU (%)'] = int(istat['summary_cpuLoad'] * 100)
        row.update([(f'{k} (rpm)', v) for k,v in istat['fans'].items()])
        row.update([(f'{k} (â„ƒ)', v) for k,v in istat['sensors'].items()])
        row['Battery (%)'] = istat['battery_charge']
        row['Read (MB/s)'] = int(istat['diskIO_speedRead'] / 1000000)
        row['Write (MB/s)'] = int(istat['diskIO_speedWrite'] / 1000000)
        row['Recv (KB/s)'] = int(istat['network_speedDownload'] / 1000)
        row['Send (KB/s)'] = int(istat['network_speedUpload'] / 1000)
        row.update([(f'{x} (MB)', int(istat[f'summary_memory{x}'] / 1000000)) for x in ('Free', 'Inactive', 'Used', 'Wired', 'Other')])
        pm = sample['powermetrics']
        row.update([(k.replace('_power', ' (mW)'), v) for k,v in pm['processor'].items() if '_power' in k])
        row.update([(f'{c["name"]} (mW)', c['power']) for c in pm['processor']['clusters']])
        row.update([(f'{c["name"]} (Hz)', c['freq_hz']) for c in pm['processor']['clusters']])
        row.update([(f'CPU {c["cpu"]} (Hz)', c['freq_hz']) for c in chain(*[c['cpus'] for c in pm['processor']['clusters']])])
        j.append(row)
    with open(capturename + '.csv', 'w', encoding='utf-8') as f:
        json2csv(j, csv.writer(f))
    run(f'open \'{capturename}.csv\'', check=True, shell=True)

if __name__ == '__main__':
    if len(argv) == 1:
        cap = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        plot(capture(cap), cap)
    elif argv[1][0] == 'c':
        capture(datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
    elif argv[1][0] == 'p':
        with open(argv[2] + '.json', 'r', encoding='utf-8') as f:
            plot(json.load(f), argv[2])
    else:
        print('MacPlot by pixel <pixel@chrissx.de>')
        print('Usage:')
        print(f'  {argv[0]}: capture and plot in one command')
        print(f'  {argv[0]} c[apture]: capture data')
        print(f'  {argv[0]} p[lot] [cap]: prepare the data and open numbers for plotting')
