#!/usr/bin/env python3

from datetime import datetime, timedelta
from functools import reduce
from sys import argv
from subprocess import run as rawrun, Popen, PIPE
from time import sleep
import json
import csv
import requests

def bg(cmd):
    return Popen(cmd, shell=True, stdout=PIPE)

def system(cmd):
    return rawrun(cmd, capture_output=True, check=True, shell=True).stdout

def capture(capturename):
    filename = capturename + '.json'
    samples = []
    starttime = datetime.now()
    try:
        while True:
            pm = bg('powermetrics -i 1000 -n 1')
            sleep(1)
            istat = requests.get('http://localhost:4027/api/')
            pm.wait()
            pm = pm.stdout.readlines()
            pm = [s for b in pm if (s := b.decode('utf-8').rstrip()) != '' and ':' in s]
            pm = dict([[f.strip() for f in s.split(':', 1)] for s in pm])
            timestamp = datetime.now() - starttime
            samples.append({'timestamp': timestamp / timedelta(seconds=1),
                            'istatistica': json.loads(istat.text),
                            'powermetrics': pm})
    except KeyboardInterrupt:
        pass
    json.dump(samples, open(filename, 'w'))
    return samples

def plot(samples, capturename: str):
    w = csv.writer(open(capturename + '.csv', 'w'))
    w.writerow([
        'time',
        'cpu (%)',
        'fan (rpm)',
        'p-cluster (â„ƒ)',
        'battery (%)',
        'read (MB/s)',
        'write (MB/s)',
        'recv (KB/s)',
        'send (KB/s)',
        'free (MB)',
        'inactive (MB)',
        'used (MB)',
        'wired (MB)',
        'other (MB)',
        'cpu (mW)',
        'gpu (mW)',
        'e-cluster (mW)',
        'p-cluster (mW)',
        # we currently only support machines with 8 cpus, TODO: fix that
    ] + [f'cpu{i} (MHz)' for i in range(8)])
    for sample in samples:
        istat = sample['istatistica']
        pm = sample['powermetrics']
        temps = istat['sensors']
        temps = [temps[k] for k in temps.keys() if k.split(' ')[0] == 'pACC']
        temps = [int(i) for i in temps if i != '' and int(i) != 0]
        ts = int(sample['timestamp'])
        if len(samples) < 100:
            row = ['%02d' % ts]
        elif len(samples) < 6000:
            row = ['%d:%02d' % (int(ts/60), ts%60)]
        else:
            row = ['%d:%02d:%02d' % (int(ts/3600), int(ts%3600/60), ts%60)]
        row.append(int(istat['summary_cpuLoad'] * 100))
        row.append(istat['sensors_fansData'].rstrip())
        row.append(int(reduce(lambda x, y: x + y, temps) / len(temps)))
        row.append(istat['battery_charge'])
        row.append(int(istat['diskIO_speedRead'] / 1000000))
        row.append(int(istat['diskIO_speedWrite'] / 1000000))
        row.append(int(istat['network_speedDownload'] / 1000))
        row.append(int(istat['network_speedUpload'] / 1000))
        row.append(int(istat['summary_memoryFree'] / 1000000))
        row.append(int(istat['summary_memoryInactive'] / 1000000))
        row.append(int(istat['summary_memoryUsed'] / 1000000))
        row.append(int(istat['summary_memoryWired'] / 1000000))
        row.append(int(istat['summary_memoryOther'] / 1000000))
        row.append(pm['CPU Power'].split(' ')[0])
        row.append(pm['GPU Power'].split(' ')[0])
        row.append(pm['E-Cluster Power'].split(' ')[0])
        row.append(pm['P-Cluster Power'].split(' ')[0])
        row.extend([pm[f'CPU {i} frequency'].split(' ')[0] for i in range(8)])
        w.writerow(row)
    system('open \'%s.csv\'' % capturename)

if __name__ == '__main__':
    if len(argv) == 1:
        cap = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        plot(capture(cap), cap)
    elif argv[1][0] == 'c':
        capture(datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
    elif argv[1][0] == 'p':
        plot(json.load(open(argv[2] + '.json', 'r')), argv[2])
    else:
        print('MacPlot by chrissx <chrissx@chrissx.de>')
        print('Usage:')
        print('%s: capture and plot in one command' % argv[0])
        print('%s c[capture]: capture data' % argv[0])
        print('%s p[plot] [cap]: prepare the data and open numbers for plotting' % argv[0])
